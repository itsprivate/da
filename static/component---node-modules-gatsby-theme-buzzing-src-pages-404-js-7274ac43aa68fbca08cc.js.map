{"version":3,"sources":["webpack://example/./node_modules/url-join/lib/url-join.js","webpack://example/./node_modules/gatsby-theme-buzzing/src/gatsby-theme-timeline/components/seo.js","webpack://example/./node_modules/gatsby-theme-buzzing/src/pages/404.js","webpack://example/./node_modules/gatsby-theme-buzzing/src/util.js","webpack://example/./node_modules/gatsby-theme-buzzing/utils/index.js","webpack://example/./node_modules/gatsby-theme-i18n/src/components/localized-link.js"],"names":["normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","SEO","description","lang","meta","title","authorImage","imageSource","imageAlt","location","pageType","item","useStaticQuery","site","avatar","defaultImage","locale","useLocalization","siteDescription","t","siteMetadata","localize","metaDescription","telegram","author","siteUrl","keywords","avatarImage","getSrc","getImagePath","imageURI","urlJoin","withPrefix","image","imageAltText","siteTitle","pageTitle","authorJSONLD","name","logoJSONLD","url","caption","schemaOrgJSONLD","postURL","pathname","datePublished","Date","date","itemListElement","position","headline","publisher","logo","htmlAttributes","content","property","concat","type","JSON","stringify","defaultProps","style","width","height","display","justifyContent","alignItems","Link","to","className","localizedPath","defaultLang","path","isDefaultLang","key","defaultValue","value","Array","isArray","localeItem","finalTitle","parent","provider","titleArr","pureTitle","pureTagline","sharedContent","field","startsWith","finalExcerpt","excerpt","LocalizedLink","language","props","prefixDefault","linkLocale"],"mappings":"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","file":"component---node-modules-gatsby-theme-buzzing-src-pages-404-js-7274ac43aa68fbca08cc.js","sourcesContent":["(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql, withPrefix } from \"gatsby\"\nimport { useLocalization } from \"gatsby-theme-i18n\"\nimport urlJoin from \"url-join\"\nimport { getSrc } from \"gatsby-plugin-image\"\n\nimport { t } from \"../../util\"\nfunction SEO({\n  description,\n  lang,\n  meta,\n  title,\n  authorImage,\n  imageSource,\n  imageAlt,\n  location,\n  pageType,\n  item,\n}) {\n  const { site, avatar, defaultImage } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n            keywords\n            telegram\n            localize {\n              locale\n              title\n              description\n              author\n              keywords\n            }\n          }\n        }\n        defaultImage: file(\n          absolutePath: { regex: \"/avatar.(jpeg|jpg|gif|png)/\" }\n        ) {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n        avatar: file(absolutePath: { regex: \"/avatar.(jpeg|jpg|gif|png)/\" }) {\n          childImageSharp {\n            gatsbyImageData(width: 48, height: 48, layout: FIXED)\n          }\n        }\n      }\n    `\n  )\n\n  const { locale } = useLocalization()\n  const siteDescription = t(\n    \"description\",\n    site.siteMetadata.localize,\n    site.siteMetadata.description,\n    locale\n  )\n  const metaDescription = description || siteDescription\n  const telegram = site.siteMetadata.telegram\n\n  const author = t(\n    \"author\",\n    site.siteMetadata.localize,\n    site.siteMetadata.author,\n    locale\n  )\n  const siteUrl = site.siteMetadata.siteUrl\n  const keywords = t(\n    \"keywords\",\n    site.siteMetadata.localize,\n    site.siteMetadata.keywords,\n    locale\n  )\n  const avatarImage = authorImage || (avatar && getSrc(avatar))\n  const getImagePath = imageURI => {\n    if (\n      !imageURI.match(\n        `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n      )\n    )\n      return urlJoin(siteUrl, withPrefix(imageURI))\n\n    return imageURI\n  }\n  const image = imageSource\n    ? getImagePath(imageSource)\n    : getImagePath(defaultImage ? getSrc(defaultImage) : null)\n\n  const imageAltText = imageAlt || metaDescription\n  const siteTitle = t(\n    \"title\",\n    site.siteMetadata.localize,\n    site.siteMetadata.title,\n    locale\n  )\n  const pageTitle = `${title} - ${siteTitle}`\n  const authorJSONLD = {\n    \"@type\": `Person`,\n    name: author,\n  }\n\n  const logoJSONLD = {\n    \"@type\": `ImageObject`,\n    url: getImagePath(avatarImage),\n    \"@id\": urlJoin(siteUrl, withPrefix(`#logo`)),\n    caption: `${siteTitle} Logo`,\n  }\n\n  const schemaOrgJSONLD = [\n    {\n      \"@context\": `http://schema.org`,\n      \"@type\": `WebSite`,\n      \"@id\": urlJoin(siteUrl, withPrefix(`#website`)),\n      url: withPrefix(siteUrl),\n      name: siteTitle,\n      image: logoJSONLD,\n    },\n  ]\n  if (pageType === `detail`) {\n    const postURL = urlJoin(siteUrl, location.pathname)\n    const datePublished = new Date(item.date)\n    schemaOrgJSONLD.push(\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BreadcrumbList`,\n        itemListElement: [\n          {\n            \"@type\": `ListItem`,\n            position: 1,\n            item: {\n              \"@id\": postURL,\n              name: title,\n              image,\n            },\n          },\n        ],\n      },\n      {\n        \"@context\": `http://schema.org`,\n        \"@type\": `BlogPosting`,\n        url: postURL,\n        name: title,\n        headline: title,\n        image: { \"@type\": `ImageObject`, url: image },\n        author: authorJSONLD,\n        publisher: {\n          ...authorJSONLD,\n          \"@type\": `Organization`,\n          logo: logoJSONLD,\n        },\n        datePublished,\n        description: metaDescription,\n      }\n    )\n  }\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: lang || locale,\n      }}\n      title={pageTitle}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: `keywords`,\n          content: keywords.join(`,`),\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:creator`,\n          content: author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          image\n            ? [\n                {\n                  name: `og:image`,\n                  content: image,\n                },\n                {\n                  name: `og:image:alt`,\n                  content: imageAltText,\n                },\n                {\n                  name: `twitter:image`,\n                  content: image,\n                },\n                {\n                  name: `twitter:image:alt`,\n                  content: imageAltText,\n                },\n                {\n                  name: `twitter:card`,\n                  content: `summary_large_image`,\n                },\n              ]\n            : [\n                {\n                  name: `twitter:card`,\n                  content: `summary`,\n                },\n              ]\n        )\n        .concat(\n          telegram\n            ? [\n                {\n                  name: `telegram:channel`,\n                  content: telegram,\n                },\n              ]\n            : []\n        )\n        .concat(meta)}\n    >\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  meta: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  title: PropTypes.string.isRequired,\n  imageSource: PropTypes.string,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport SEO from \"gatsby-theme-timeline/src/components/seo\"\nconst NotFoundPage = () => (\n  <>\n    <SEO title=\"404: Not found\" />\n    <div\n      style={{\n        width: `100vw`,\n        height: `100vh`,\n        display: `flex`,\n        justifyContent: `center`,\n        alignItems: `center`,\n      }}\n    >\n      <div>\n        <h1>NOT FOUND</h1>\n        <p>\n          {`You just hit a route that doesn't exist... Please visit `}{\" \"}\n          <Link to=\"/\" className=\"link-style\">\n            Homepage\n          </Link>\n        </p>\n      </div>\n    </div>\n  </>\n)\nexport default NotFoundPage\n","export {\n  t,\n  getTitle,\n  getExcerpt,\n  getSharedTitle,\n  kebabToSnakeCase,\n} from \"../utils\"\n\nfunction isDefaultLang(locale, defaultLang) {\n  return locale === defaultLang\n}\n\nexport function localizedPath(defaultLang, locale, path) {\n  // The default language isn't prefixed\n  if (isDefaultLang(locale, defaultLang)) {\n    return path\n  }\n\n  const [, base] = path.split(`/`)\n  //\n  // If for whatever reason we receive an already localized path\n  // (e.g. if the path was made with location.pathname)\n  // just return it as-is.\n  if (base === locale) {\n    return path\n  }\n\n  // If it's another language, prefix with the locale\n  return `/${locale}${path}`\n}\n","const kebabToSnakeCase = str => {\n  return str.replace(/-/g, \"_\")\n}\nexports.kebabToSnakeCase = kebabToSnakeCase\nconst t = (key, localize, defaultValue, locale = \"zh\") => {\n  let value = defaultValue\n  if (localize && Array.isArray(localize)) {\n    for (let i = 0; i < localize.length; i++) {\n      const localeItem = localize[i]\n      const currentLocale = localeItem.locale\n      if (locale === currentLocale) {\n        if (localeItem[key]) {\n          value = localeItem[key]\n          return value\n        }\n      }\n    }\n  }\n  return value\n}\nexports.t = t\nconst getTitle = (item, locale = \"zh\") => {\n  let finalTitle = item.title\n  let localize = []\n  if (item.parent && item.parent.localize) {\n    localize = item.parent.localize\n  }\n  const { provider } = item\n  if (provider === \"Product Hunt\") {\n    const titleArr = finalTitle.split(\" - \")\n    const pureTitle = titleArr[0]\n    const pureTagline = titleArr[1]\n    let finalTagline = t(\"tagline\", localize, pureTagline, locale)\n    finalTitle = `${pureTitle} - ${finalTagline}`\n  } else if (provider === \"Twitter\") {\n    const sharedContent = item.sharedContent\n    const retweeted =\n      sharedContent && sharedContent.title && finalTitle.startsWith(`RT @`)\n    let field = \"full_text\"\n    if (retweeted) {\n      field = \"retweeted_status_full_text\"\n      finalTitle = sharedContent.title\n    }\n\n    finalTitle = t(field, localize, finalTitle, locale)\n  } else {\n    finalTitle = t(\"title\", localize, finalTitle, locale)\n  }\n  return finalTitle\n}\nexports.getTitle = getTitle\nconst getSharedTitle = (item, locale = \"zh\") => {\n  const { sharedContent } = item\n\n  if (!sharedContent || !sharedContent.title) {\n    return null\n  }\n  let finalTitle = sharedContent.title\n  let localize = []\n  if (item.parent && item.parent.localize) {\n    localize = item.parent.localize\n  }\n  finalTitle = t(\"quoted_status_full_text\", localize, finalTitle, locale)\n  return finalTitle\n}\nexports.getSharedTitle = getSharedTitle\nconst getExcerpt = (item, locale = \"zh\") => {\n  let finalExcerpt = item.excerpt\n  let localize = []\n  if (item.parent && item.parent.localize) {\n    localize = item.parent.localize\n  }\n  const { provider } = item\n  if (provider === \"Product Hunt\" || provider === \"Youtube\") {\n    finalExcerpt = t(\"description\", localize, finalExcerpt, locale)\n  } else if (provider === \"Reddit\") {\n    finalExcerpt = t(\"the_new_excerpt\", localize, finalExcerpt, locale)\n  } else {\n    finalExcerpt = t(\"excerpt\", localize, finalExcerpt, locale)\n  }\n  return finalExcerpt\n}\nexports.getExcerpt = getExcerpt\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport { localizedPath } from \"../helpers\"\nimport { useLocalization } from \"../hooks/use-localization\"\n\nexport const LocalizedLink = ({ to, language, ...props }) => {\n  const { defaultLang, prefixDefault, locale } = useLocalization()\n  const linkLocale = language || locale\n\n  return (\n    <Link\n      {...props}\n      to={localizedPath({\n        defaultLang,\n        prefixDefault,\n        locale: linkLocale,\n        path: to,\n      })}\n    />\n  )\n}\n"],"sourceRoot":""}